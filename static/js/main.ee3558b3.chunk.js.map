{"version":3,"sources":["images/logo-square.png","Menu1Link.js","loader/MoiveDataCrawler.js","MainStillcutSlider.js","MovieDetailPopup.js","App.js","Menu1.js","Crawling.js","Menu2.js","MenuLink.js","Menu.js","Root.js","serviceWorker.js","index.js"],"names":["module","exports","Menu1Link","id","to","className","activeClassName","MoiveDataCrawler","THIS","this","Object","defineProperty","value","writable","configurable","is_list","GENRES","COMEDY","ACTION","ADVENTURE","ANIMATION","ROMANCE","HORROR","m_strGenre","search_condition","get","set","strGenre","hasOwnProperty","console","log","enumerable","m_nItemPerPage","nItemPerPage","m_nCurrentPage","nCurrentPage","jsnData","objMovieData","mv_id","ktitle","opendate","poster_img","datHTML","strActors","datActors","cheerio","load","$","children","nActorsCnt","length","some","htmlLI","nIndex","type","name","data","e","MOVIELIST_URL","MOIVELIST_CRAWLING_URL_PREFIX","BOXOFFICE_CRAWLING_KEY","MOIVELIST_CRAWLING_URL_POSTFIX","axios","then","response","strJSONData","replace","jsnMovieData","JSON","parse","result","itemList","arrMovieList","arrConvertMovieList","i","objConvertMovieData","convertMovieObject","push","item_per_page","getBoxOfficeListWithPoster","arrReturnMovieList","fnGetStillcut","MOVIEPOSTER_API_URL","params","api_key","MOVIEPOSTER_API_KEY","query","movie_title","timeout","status","arrResult","results","strStillcutURL","objResult","backdrop_path","MOVIEPOSTER_URL_PREFIX","NO_POSTER_IMAGE_URL","a","async","objPromise","fnGetStillcutLoop","nStart","current_page","genre","objConvertedMovieData","strMovieTitle","strPosterURL","CORS_ANYWHERE_URL","NAVER_DETAIL_MOBILE_URL","headers","strGenres","strNations","strOpenYear","strPlot","$htmlDetailInfo","datMoiveInfo","nPlotIndex","forEach","objMovieInfo","getActors","StillcutUnit","props","stillcut_url","src","alt","Component","MainStillcutSlider","ldrMovieData","state","slider_data","arrSliderData","setState","trackPromise","getBoxOfficeListWithStillcut","arrBOData","addSliderData","catch","getStillcutList","rel","href","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","draggable","map","objSliderData","key","MovieDetailPopup","nextProps","divPopupInner","document","getElementById","style","display","onClick","closePopup","movie_data","poster_url","open_year","actors_text","genres_text","nations","plot","App","arrMoiveData","scrollParentRef","hdlAddListTimer","isMobile","showPopup","hasMore","UserAgent","navigator","userAgent","match","body","overflow","bAddList","nFirst","divMovieList","hasChildNodes","removeChild","firstChild","divMovie","createElement","imgPoster","Image","addEventListener","getInfo","appendChild","strMovieID","togglePopup","getMovieInfoWithPoster","drawMovieInfo","getMovieList","arrMovieData","drawMovieList","getList","scrolledToBottom","scrollTop","Math","round","documentElement","scrollHeight","clientHeight","window","innerHeight","ceil","showClickTopButton","hiddenClickTopButton","setTimeout","divClickTop","scrollTo","handleOnScroll","bind","clearTimeout","pageStart","loadMore","loadMoreMovieList","useWindow","LoadingIndicator","usePromiseTracker","area","promiseInProgress","width","height","justifyContent","alignItems","color","Menu1","exact","path","component","Crawling","movie_id","require","getMovieTitle","getReview","objOptions","cors","error","getHtml","html","ulList","$MVList","elem","datTitle","datTotalGroup","strTitle","strID","strSummary","objReview","objChild","bFind","attribs","class","objChildren","childNodes","datSummary","title","summary","filter","n","Menu2","arrBoxOfficeData","divReviewList","hd","objBOData","divImage","divInfo","divTitle","innerHTML","divActor","review_text","divReview","reviewTitle","reviewId","reviewContext","objThis","drawBoxOfficeList","getBoxofficeList","arrBoxofficeData","MenuLink","Menu","Helmet","logo","sizes","placeholder","Root","basename","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","URL","process","origin","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee3558b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-square.e5a5e9c2.png\";","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./MenuLink.css\";\r\n\r\nconst Menu1Link = () => {\r\n  return (\r\n    <div id=\"mdiv_sub_menu\">\r\n      <ul>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/COMEDY\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">코미디</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/ACTION\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">액션</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/ADVENTURE\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">모험</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/ANIMATION\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">애니메이션</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/ROMANCE\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">로맨스</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu1/movie/HORROR\" className=\"menu_link_sub_li_style\" activeClassName=\"active\">공포</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu1Link;\r\n","import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nclass MoiveDataCrawler\r\n{\r\n    constructor()\r\n    {\r\n        const THIS = this;\r\n\r\n        // API 키(The Movie DB)\r\n        Object.defineProperty(this, \"MOVIEPOSTER_API_KEY\"\r\n                                , {value : \"15d2ea6d0dc1d476efbca3eba2b9bbfb\"\r\n                                , writable : false\r\n                                , configurable: false});\r\n        // THE MOVIDE DB API URL(포스터 URL 및 썸네일 관련)\r\n        let strMPAPIURL = \"https://api.themoviedb.org/3/search/movie\";\r\n        Object.defineProperty(this, \"MOVIEPOSTER_API_URL\"\r\n                                , {value : strMPAPIURL\r\n                                , writable : false\r\n                                , configurable: false});\r\n        // 영화 포스터 및 썸네일 이미지 URL Prefix\r\n        let strPosterURLPrefix = \"http://image.tmdb.org/t/p/w500/\";\r\n        Object.defineProperty(this, \"MOVIEPOSTER_URL_PREFIX\"\r\n                                , {value : strPosterURLPrefix\r\n                                , writable : false\r\n                                , configurable: false});\r\n        // 포스터 이미지 없는 경우 이미지 없음 URL\r\n        let strNoImgURL = \"https://www.pbs.org/black-culture/lunchbox_plugins/s/photogallery/img/no-image-available.jpg\";\r\n        Object.defineProperty(this, \"NO_POSTER_IMAGE_URL\"\r\n                                , {value : strNoImgURL\r\n                                , writable : false\r\n                                , configurable: false});\r\n\r\n        // CORS 우회 URL\r\n        let strCORSAnywhereURL= \"https://cors-anywhere.herokuapp.com/\";\r\n        Object.defineProperty(this, \"CORS_ANYWHERE_URL\"\r\n                                , {value : strCORSAnywhereURL\r\n                                , writable : false\r\n                                , configurable: false});\r\n\r\n        // 네이버 영화 목록 URL\r\n        let strNaverURLPrefix= \"https://m.search.naver.com/p/csearch/content/qapirender.nhn?_callback=window.__jindo2_callback._$3361_0&pkid=68&where=nexearch&q=\";\r\n        Object.defineProperty(this, \"MOIVELIST_CRAWLING_URL_PREFIX\"\r\n                                , {value : strNaverURLPrefix\r\n                                , writable : false\r\n                                , configurable: false});\r\n\r\n        let strNaverURLPostfix = \"&so=s3.dsc\";\r\n        Object.defineProperty(this, \"MOIVELIST_CRAWLING_URL_POSTFIX\"\r\n                                , {value : strNaverURLPostfix\r\n                                , writable : false\r\n                                , configurable: false});\r\n        \r\n        // 네이버 영화 상세 정보 URL\r\n        let strNaverDetailMobileURL = \"https://m.search.naver.com/search.naver?where=m&query=\";\r\n        Object.defineProperty(this, \"NAVER_DETAIL_MOBILE_URL\"\r\n                                , {value : strNaverDetailMobileURL\r\n                                , writable : false\r\n                                , configurable: false});\r\n        this.is_list = true;\r\n        \r\n        \r\n        Object.defineProperty(this, \"BOXOFFICE_CRAWLING_KEY\"\r\n                                , {value : \"%ED%95%9C%EA%B5%AD%20%EC%98%81%ED%99%94\"\r\n                                , writable : false\r\n                                , configurable: false});\r\n        // 장르 검색 키\r\n        this.GENRES = {\r\n            COMEDY : \"%ED%95%9C%EA%B5%AD%20%EC%BD%94%EB%AF%B8%EB%94%94%20%EC%98%81%ED%99%94\"\r\n            , ACTION : \"%ED%95%9C%EA%B5%AD%20%EC%95%A1%EC%85%98%20%EC%98%81%ED%99%94\"\r\n            , ADVENTURE : \"%ED%95%9C%EA%B5%AD%20%EB%AA%A8%ED%97%98%20%EC%98%81%ED%99%94\" \r\n            , ANIMATION : \"%ED%95%9C%EA%B5%AD%20%EC%95%A0%EB%8B%88%20%EC%98%81%ED%99%94\"\r\n            , ROMANCE : \"%ED%95%9C%EA%B5%AD%20%EB%A9%9C%EB%A1%9C%EB%A1%9C%EB%A7%A8%EC%8A%A4%20%EC%98%81%ED%99%94\"\r\n            , HORROR : \"%EA%B3%B5%ED%8F%AC%20%EC%98%81%ED%99%94\"\r\n        }\r\n\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        //\r\n        //                  검색조건 설정용 객체 정의\r\n        // * search_condition\r\n        //   => .is_list : 리스트/상세정보 구분 (true, false)\r\n        //   => .item_per_page : 한페이지에 로드할 정보(기본값 : 10 / 최대 10)\r\n        //   => .genre : 장르 (this.GENRES 값으로 매칭)\r\n        //\r\n\r\n        // 검색 조건 설정용 객체\r\n        let m_objSearchCondition = {};\r\n        Object.defineProperty(this, \"search_condition\"\r\n                                ,{value : m_objSearchCondition\r\n                                , writable : false\r\n                                , configurable: false});\r\n\r\n        let m_strGenre = this.GENRES.COMEDY;\r\n        Object.defineProperty(this.search_condition\r\n                            , \"genre\"\r\n                            , {\r\n                                get() { return m_strGenre; },\r\n                                set(strGenre) {\r\n                                    if(typeof(strGenre) === 'string' \r\n                                        && THIS.GENRES.hasOwnProperty(strGenre))\r\n                                    {\r\n                                        m_strGenre = THIS.GENRES[strGenre];\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        console.log(\"[MovieDataLoader.search_config.genre]:문자열 및 GERENS에 해당하는 값만 입력 가능합니다.\");\r\n                                    }\r\n                                },\r\n                                enumerable: true,\r\n                                configurable: false\r\n                            }\r\n        );\r\n        \r\n        // 한 페이지에 로드할 영화 수(기본 10, 최대 10)\r\n        let m_nItemPerPage = 10;\r\n        Object.defineProperty(this.search_condition, \"item_per_page\"\r\n                                , {\r\n                                    get() { return m_nItemPerPage; },\r\n                                    set(nItemPerPage) {\r\n                                        if(typeof(nItemPerPage) === 'number')\r\n                                        {\r\n                                            if(nItemPerPage > 0 && nItemPerPage <= 10)\r\n                                            {\r\n                                                m_nItemPerPage = nItemPerPage;\r\n                                            }\r\n                                            else\r\n                                            {\r\n                                                console.log(\"[MovieDataLoader.search_config.item_per_page]:숫자 1~10을 입력해주세요.\");\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            console.log(\"[MovieDataLoader.search_config.item_per_page]:숫자만 입력 가능합니다.\");\r\n                                        }\r\n                                    },\r\n                                    enumerable: true,\r\n                                    configurable: false\r\n                                }\r\n                            );\r\n        // 한 페이지에 로드할 영화 수(기본 10, 최대 10)\r\n        let m_nCurrentPage = 1;\r\n        Object.defineProperty(this.search_condition, \"current_page\"\r\n                                , {\r\n                                    get() { return m_nCurrentPage; },\r\n                                    set(nCurrentPage) {\r\n                                        if(typeof(nCurrentPage) === 'number')\r\n                                        {\r\n                                            m_nCurrentPage = nCurrentPage;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            console.log(\"[MovieDataLoader.search_config.item_per_page]:숫자만 입력 가능합니다.\");\r\n                                        }\r\n                                    },\r\n                                    enumerable: true,\r\n                                    configurable: false\r\n                                }\r\n                            );\r\n    }\r\n\r\n    /**\r\n     * 받은 객체를 객체로 변환 후 반환한다.\r\n     * \r\n        objMovieData.movie_id = \"\";                 // 영화 호출용 고유번호\r\n        objMovieData.movie_title = \"\";              // 영화명\r\n        objMovieData.poster_url = \"\";               // 포스터 URL(getMoviePoster함수에서 생성)\r\n        objMovieData.stillcut_url = \"\";             // 스틸컷 URL(getMoviePoster함수에서 생성)\r\n        objMovieData.show_time = \"\";                // 상영시간\r\n        objMovieData.open_year = \"\";                // 개봉연도\r\n        objMovieData.nations = \"\";                  // 국가\r\n        objMovieData.genres_text = \"\";              // 장르(문자열로 전부 나열)\r\n        objMovieData.directors_text = \"\";           // 감독명(문자열로 전부 나열)\r\n        objMovieData.actors_text = \"\";              // 배우명(문자열로 전부 나열)\r\n        objMovieData.plot = \"\";                       // 줄거리\r\n\r\n     *  @param jsnData : 변환할 JSON 객체\r\n     *  @return objMovieData\r\n     */\r\n    convertMovieObject(jsnData)\r\n    {\r\n        let objMovieData = {};\r\n        \r\n        // 영화코드\r\n        Object.defineProperty(objMovieData, \"movie_id\", {value : jsnData.mv_id\r\n            , writable : false\r\n            , configurable: false});\r\n        // 영화명\r\n        Object.defineProperty(objMovieData, \"movie_title\", {value : jsnData.ktitle\r\n            , writable : false\r\n            , configurable: false});\r\n        // 개봉연도\r\n        Object.defineProperty(objMovieData, \"open_year\", {value : jsnData.opendate\r\n            , writable : false\r\n            , configurable: false});\r\n        \r\n        // 포스터 URL\r\n        Object.defineProperty(objMovieData, \"poster_url\", {value : jsnData.poster_img\r\n            , writable : false\r\n            , configurable: false});\r\n\r\n        return objMovieData;\r\n    }\r\n\r\n    /**\r\n     * HTML Data에서 배우 정보를 가져온다.\r\n     * @param {*} datHTML \r\n     */\r\n    getActors(datHTML)\r\n    {\r\n        let strActors = \"\";\r\n\r\n        try\r\n        {\r\n            // 출연배우\r\n            const $ = cheerio.load(datHTML);\r\n            const $htmlActors = $(\"div.movie_sub_info\");\r\n            let datActors = $htmlActors.children(\"div.list_wrap\")\r\n                                    .children(\"div.list_scroll\")\r\n                                    .children(\"div.api_list_scroll_wrap\")\r\n                                    .children(\"div\")\r\n                                    .children(\"ul.api_list_scroll\");\r\n            \r\n            let nActorsCnt = 0;\r\n            const MAX_ACTORS_COUNT = 3;\r\n\r\n            // 배우 관련 태그를 발견한 경우 [배우명], [배우명], ... 의 문자열 형태로 반환한다.\r\n            // (MAX_ACTORS_COUNT에 설정된 수만큼 반환)\r\n            // 없는 경우 '정보 없음'으로 반환한다.\r\n            if(datActors.length > 0)\r\n            {\r\n                datActors[0].children.some(\r\n                    function(htmlLI , nIndex)\r\n                    {\r\n                        \r\n                        if(htmlLI.type === 'tag' \r\n                            && htmlLI.name === 'li'\r\n                            && nIndex > 2)\r\n                        {\r\n                            if(strActors !== \"\")\r\n                            {\r\n                                strActors += \", \"\r\n                            }\r\n                            strActors += htmlLI.children[1].children[3].children[0].data;\r\n                            nActorsCnt++;\r\n                        }\r\n\r\n                        return (nActorsCnt === MAX_ACTORS_COUNT);\r\n                    }\r\n                );\r\n            }\r\n            else\r\n            {\r\n                strActors = \"정보 없음\";\r\n            }\r\n        }\r\n        catch(e)\r\n        {\r\n            console.log(e);\r\n        }\r\n\r\n        return strActors;\r\n    }\r\n    \r\n    /**\r\n     * 박스오피스 목록을 가져온다.\r\n     */\r\n    getBoxOfficeListWithPoster()\r\n    {\r\n        const THIS = this;\r\n        const MOVIELIST_URL = (THIS.MOIVELIST_CRAWLING_URL_PREFIX \r\n                            + THIS.BOXOFFICE_CRAWLING_KEY \r\n                            + THIS.MOIVELIST_CRAWLING_URL_POSTFIX\r\n        );\r\n        \r\n        // 설정된 URL 정보로 호출 후 값을 받아온 후 JSON객체 정보만 추려서 객체화 한다.\r\n        // window.__jindo2_callback._$3361_0([JSON 형태]); <= 형태로 값이 반환됨\r\n        return axios.get(MOVIELIST_URL).then(\r\n            function(response)\r\n            {\r\n                if(response != null && response.data != null)\r\n                {\r\n                    let strJSONData = response.data.replace(\"window.__jindo2_callback._$3361_0(\", \"\").replace(\");\" , \"\");\r\n                    let jsnMovieData = JSON.parse(strJSONData);\r\n\r\n                    if(jsnMovieData.data != null && jsnMovieData.data.result != null \r\n                        && jsnMovieData.data.result.itemList != null)\r\n                    {   \r\n                        let arrMovieList = jsnMovieData.data.result.itemList;\r\n\r\n                        if(arrMovieList != null && arrMovieList.length > 0)\r\n                        {\r\n                            let arrConvertMovieList = [];\r\n                            arrMovieList.some(function(objMovieData, i)\r\n                                {\r\n                                    let objConvertMovieData = THIS.convertMovieObject(objMovieData);\r\n                                    arrConvertMovieList.push(objConvertMovieData);\r\n\r\n                                    return (arrConvertMovieList.length === THIS.search_condition.item_per_page);\r\n                                }\r\n                            );\r\n                            \r\n                            return arrConvertMovieList;\r\n                        }\r\n                    }\r\n                }   \r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     *  박스오피스 영화 목록과 스틸컷을 가져온다.\r\n     *  @return\r\n     */\r\n    getBoxOfficeListWithStillcut()\r\n    {\r\n        const THIS = this;\r\n\r\n        return THIS.getBoxOfficeListWithPoster().then(\r\n            function(arrReturnMovieList)\r\n            {\r\n                function fnGetStillcut(objMovieData)\r\n                {   \r\n                    return axios.get(THIS.MOVIEPOSTER_API_URL\r\n                        , {params: { \r\n                                api_key : THIS.MOVIEPOSTER_API_KEY\r\n                                , query : objMovieData.movie_title\r\n                            }\r\n                            ,timeout: 10000 // 10초 이내에 응답이 오지 않으면 에러로 간주\r\n                        }\r\n                    ).then((response) => \r\n                        {\r\n                            // 성공한 경우 스틸컷 URL 삽입\r\n                            if(response.status === 200)\r\n                            {\r\n                                // 스틸컷이 없거나 results객체에 backdrop_path값이 없는 경우는 \r\n                                // No Image URL로 설정한다.\r\n                                let arrResult = response.data.results;\r\n                                let strStillcutURL = \"\";\r\n\r\n                                if(arrResult != null && arrResult.length > 0)\r\n                                {\r\n                                    let objResult = arrResult[0];\r\n                                    \r\n                                    if(objResult.backdrop_path != null \r\n                                        && objResult.backdrop_path !== \"\")\r\n                                    {\r\n                                        strStillcutURL = (THIS.MOVIEPOSTER_URL_PREFIX \r\n                                                        + objResult.backdrop_path);\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        strStillcutURL = THIS.NO_POSTER_IMAGE_URL;\r\n                                    }\r\n\r\n                                    Object.defineProperty(objMovieData\r\n                                        , \"stillcut_url\"\r\n                                        , {value : strStillcutURL\r\n                                        , writable : false\r\n                                        , configurable: false}\r\n                                    );\r\n                                }\r\n                            }\r\n                            \r\n                            return objMovieData;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                async function fnGetStillcutLoop()\r\n                {\r\n                    let nIndex = 0;\r\n                    let objPromise = null;\r\n                    \r\n                    for(nIndex = 0; nIndex < arrReturnMovieList.length; nIndex++)\r\n                    {\r\n                        // 스틸컷 이미지를 API를 이용해서 가져온다.\r\n                        // 스틸컷 이미지가 없는 경우 NO Image 출력\r\n                        objPromise = await fnGetStillcut(arrReturnMovieList[nIndex]);\r\n                    }\r\n\r\n                    return objPromise;\r\n\r\n                }\r\n\r\n                return fnGetStillcutLoop().then(\r\n                    function()\r\n                    {\r\n                        return arrReturnMovieList\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * 설정된 장르의 영화 목록을 가져온다.\r\n     */\r\n    getMovieList()\r\n    {\r\n        const THIS = this;\r\n        let nStart = 1;\r\n        \r\n        if(THIS.search_condition.current_page > 1)\r\n        {\r\n            nStart = (THIS.search_condition.current_page - 1) * THIS.search_condition.item_per_page + 1;\r\n        }\r\n        const MOVIELIST_URL = (THIS.MOIVELIST_CRAWLING_URL_PREFIX \r\n                            + THIS.search_condition.genre \r\n                            + THIS.MOIVELIST_CRAWLING_URL_POSTFIX\r\n                            + \"&start=\" + nStart \r\n                            + \"&display=\" + THIS.search_condition.item_per_page\r\n        );\r\n        \r\n        return axios.get(MOVIELIST_URL).then(\r\n            function(response)\r\n            {\r\n                if(response != null && response.data != null)\r\n                {\r\n                    let strJSONData = response.data.replace(\"window.__jindo2_callback._$3361_0(\", \"\").replace(\");\" , \"\");\r\n                    let jsnMovieData = JSON.parse(strJSONData);\r\n\r\n                    if(jsnMovieData.data != null && jsnMovieData.data.result != null \r\n                        && jsnMovieData.data.result.itemList != null)\r\n                    {   \r\n                        let arrMovieList = jsnMovieData.data.result.itemList;\r\n\r\n                        if(arrMovieList != null && arrMovieList.length > 0)\r\n                        {\r\n                            let arrConvertMovieList = [];\r\n                            arrMovieList.some(function(objMovieData, i)\r\n                                {\r\n                                    let objConvertedMovieData = THIS.convertMovieObject(objMovieData);\r\n                                    arrConvertMovieList.push(objConvertedMovieData);\r\n                                    return (arrConvertMovieList.length === THIS.search_condition.item_per_page);\r\n                                }\r\n                            );\r\n\r\n                            return arrConvertMovieList;\r\n                        }\r\n                    }\r\n                }   \r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * 영화 상세 정보를 가져온다.\r\n     *  @param strMovieTitle : 상세정보를 요청할 Movie ID\r\n     *  @return\r\n     */\r\n    getMovieInfoWithPoster(strMovieTitle, strPosterURL)\r\n    {\r\n        const THIS = this;\r\n\r\n        if(strMovieTitle != null && strMovieTitle !== \"\")\r\n        {\r\n            let objOptions = {\r\n                headers:{\r\n                    'Access-Control-Allow-Origin' : '*'\r\n                    , 'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With'\r\n                }\r\n            };\r\n\r\n            return axios.get(THIS.CORS_ANYWHERE_URL \r\n                + THIS.NAVER_DETAIL_MOBILE_URL \r\n                + \"영화 \" + strMovieTitle, objOptions)\r\n            .then(function(response)\r\n                {\r\n                    let objMovieData = {};\r\n                    let strGenres = \"\";\r\n                    let strNations = \"\";\r\n                    let strOpenYear = \"\";\r\n                    let strPlot = \"\";\r\n                    let strActors = \"\";\r\n\r\n                    try\r\n                    {\r\n                        const $ = cheerio.load(response.data);\r\n                        const $htmlDetailInfo = $(\"div.api_subject_bx\");\r\n                        \r\n                        // 값이 있는 경우\r\n                        if($htmlDetailInfo != null)\r\n                        {\r\n                            // 타이틀 설정\r\n                            Object.defineProperty(objMovieData, \"movie_title\"\r\n                                    , {value : strMovieTitle\r\n                                    , writable : false\r\n                                    , configurable: false});\r\n                            \r\n                            // 상세정보(장르, 국가, 개봉일)\r\n                            let datMoiveInfo = $htmlDetailInfo.children(\"div.main_info\")\r\n                                                        .children(\"div.movie_summary\")\r\n                                                        .children(\"div.detail_info\")\r\n                                                        .children(\"dl\");\r\n                            \r\n                            let nPlotIndex = 0;\r\n                            \r\n                            datMoiveInfo[0].children.forEach(\r\n                                function(objMovieInfo, nIndex)\r\n                                {\r\n                                    // 줄거리 인덱스를 설정한다.\r\n                                    if(objMovieInfo.type === \"tag\" \r\n                                        && objMovieInfo.name === \"dt\"\r\n                                        && objMovieInfo.children[0].data === \"줄거리\")\r\n                                    {\r\n                                        nPlotIndex = nIndex + 2;\r\n                                    }\r\n                                    if(objMovieInfo.type === \"tag\" && objMovieInfo.name === \"dd\")\r\n                                    {\r\n                                        // 장르, 국가\r\n                                        if(nIndex === 3)\r\n                                        {\r\n                                            strGenres = objMovieInfo.children[1].children[0].data; \r\n                                            strNations = objMovieInfo.children[5].children[0].data;\r\n                                        }\r\n                                        // 개봉날짜\r\n                                        if(nIndex === 7)\r\n                                        {\r\n                                            if(objMovieInfo.children[0].data !== null)\r\n                                            { \r\n                                                strOpenYear = objMovieInfo.children[0].data;\r\n                                            }\r\n                                        }\r\n                                        // 줄거리\r\n                                        if(nIndex === nPlotIndex)\r\n                                        {\r\n                                            strPlot = objMovieInfo.children[1].children[0].data;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                        // 출연 배우를 요청한다.\r\n                        strActors = THIS.getActors(response.data);\r\n\r\n                    }\r\n                    catch(e)\r\n                    {\r\n                        console.log(\"[MovieDataCrawler.getMovieInfoWithPoster] : \" + e);\r\n                    }\r\n\r\n                    // 포스터 URL\r\n                    Object.defineProperty(objMovieData, \"poster_url\"\r\n                            , {value : strPosterURL\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    \r\n                    // 개봉연도\r\n                    Object.defineProperty(objMovieData, \"open_year\"\r\n                            , {value : strOpenYear\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    // 국가\r\n                    Object.defineProperty(objMovieData, \"nations\"\r\n                            , {value : strNations\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    // 장르\r\n                    Object.defineProperty(objMovieData, \"genres_text\"\r\n                            , {value : strGenres\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    // 출연배우\r\n                    Object.defineProperty(objMovieData, \"actors_text\"\r\n                            , {value : strActors\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    // 줄거리\r\n                    Object.defineProperty(objMovieData, \"plot\"\r\n                            , {value : strPlot\r\n                            , writable : false\r\n                            , configurable: false});\r\n                    \r\n                    return objMovieData;\r\n                }\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default MoiveDataCrawler;","import React, { Component } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport MoiveDataCrawler from './loader/MoiveDataCrawler'\r\nimport \"./App.css\"\r\nimport \"./MainStillcutSlider.css\"\r\nimport { trackPromise } from 'react-promise-tracker';\r\n\r\nclass StillcutUnit extends Component {\r\n\r\n    render() {\r\n        let strStillcutURL = this.props.stillcut_url;\r\n        let strClassName = \"imgStill\";\r\n        return (\r\n            <div>\r\n                <img className={strClassName} src={strStillcutURL} alt=\"\"/>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nclass MainStillcutSlider extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.ldrMovieData = new MoiveDataCrawler();\r\n        this.state = {\r\n           slider_data : []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 슬라이더에 노출될 이미지 추가\r\n     * @param {} strImageURL \r\n     */\r\n    addSliderData(arrSliderData)\r\n    {\r\n        this.setState({\r\n            slider_data:arrSliderData\r\n          });\r\n    }\r\n    \r\n    /**\r\n   * 박스오피스 목록을 가져온다.\r\n   */\r\n\r\n    getStillcutList()\r\n    {\r\n        const THIS = this;\r\n        THIS.ldrMovieData.search_condition.item_per_page = 5;\r\n\r\n        trackPromise(\r\n        THIS.ldrMovieData.getBoxOfficeListWithStillcut().then(\r\n            function(arrBOData)\r\n            {\r\n                if(arrBOData != null)\r\n                {\r\n;                   THIS.addSliderData(arrBOData);\r\n                }\r\n            }\r\n        ).catch(function(e)\r\n            {\r\n            console.log(\"Error Massage : \" + e);\r\n            }\r\n        ), 'detail-area');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getStillcutList();\r\n    }\r\n\r\n    render() {\r\n        \r\n        var settings = {\r\n            dots: false,\r\n            infinite: true,\r\n            speed: 2000,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1,\r\n            autoplay:true,\r\n            autoplaySpeed:5000      // 자동스크롤 속도( 1000 : 1초 단위)\r\n            , draggable: true\r\n        };\r\n\r\n        return (\r\n        <>\r\n        <div className = \"stillcut\">\r\n            <link rel=\"stylesheet\" type=\"text/css\"\r\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"/>\r\n            <Slider {...settings} id=\"bo_stillcut_slider\">\r\n                {this.state.slider_data.map(function(objSliderData, i)\r\n                    {\r\n                        return <StillcutUnit stillcut_url={objSliderData.stillcut_url} key=\"{i}\"/>;\r\n                    })\r\n                }\r\n            </Slider>\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainStillcutSlider;","import React, { Component } from 'react';\r\nimport \"./MovieDetailPopup.css\"\r\n\r\nclass MovieDetailPopup extends Component {\r\n  /**\r\n   * props 값이 바뀌면 호출되는 함수\r\n   * @param {} nextProps \r\n   */\r\n  componentDidUpdate(nextProps) \r\n  {\r\n    let divPopupInner = document.getElementById(\"div_movie_detail\");\r\n\r\n    if(divPopupInner != null)\r\n    {\r\n      divPopupInner.style.display = \"\";\r\n    }\r\n   \r\n  }\r\n\r\n  /**\r\n   * 팝업 화면 처음 노출 시\r\n   * @param {} nextProps \r\n   */\r\n  componentDidMount() \r\n  {\r\n    let divPopupInner = document.getElementById(\"div_movie_detail\");\r\n\r\n    if(divPopupInner != null)\r\n    {\r\n      divPopupInner.style.display = \"none\";\r\n    }\r\n   \r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"popup\">\r\n        <div className=\"popup_inner\" id=\"div_movie_detail\">\r\n            {/* 영화 정보 및 닫기 버튼 */}\r\n            <div>\r\n              <div className=\"movie_info\">\r\n                영화정보\r\n              </div>\r\n              <div className=\"close_button\">\r\n                <button className=\"button\" onClick={this.props.closePopup}>X</button>\r\n              </div>\r\n            </div>\r\n            {/* 포스터 및 정보들 */}\r\n            <div className=\"context\">\r\n              {/* 포스터 */}\r\n              <div>\r\n                <img className=\"image\" src={this.props.movie_data.poster_url} alt={this.props.movie_data.movie_title}/>\r\n              </div>\r\n              {/* 상세정보 */}\r\n              <div className=\"info\">\r\n                <div className=\"title\">\r\n                  {this.props.movie_data.movie_title}\r\n                </div>\r\n                <div>\r\n                  <div className=\"open\">\r\n                    개봉일\r\n                  </div>\r\n                  <div className=\"open_year\">\r\n                    {this.props.movie_data.open_year}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"actor\">\r\n                    출연진\r\n                  </div>\r\n                  <div className=\"actor_text\">\r\n                    {this.props.movie_data.actors_text}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"genres\">\r\n                    장르\r\n                  </div>\r\n                  <div className=\"genres_text\">\r\n                    {this.props.movie_data.genres_text}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"nations\">\r\n                    국가\r\n                  </div>\r\n                  <div className=\"nations_text\">\r\n                    {this.props.movie_data.nations}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* 줄거리 */}\r\n            <div>\r\n              <div className=\"plot\">\r\n                줄거리\r\n              </div>\r\n              <div id = 'realplot'>\r\n                {this.props.movie_data.plot}\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieDetailPopup;","import React, { Component } from 'react';\r\nimport MoiveDataCrawler from './loader/MoiveDataCrawler';\r\nimport MovieDetailPopup from './MovieDetailPopup';\r\nimport './App.css'\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nclass App extends Component {\r\n  static arrMoiveData = null;\r\n  /**\r\n   * 생성자\r\n   * @param {} props \r\n   */\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.ldrMovieData = new MoiveDataCrawler();\r\n    this.arrMoiveData = null;\r\n    this.genre = \"\";\r\n    this.scrollParentRef = null;\r\n    this.current_page = 1;\r\n    this.hdlAddListTimer = null;\r\n    \r\n    // 한 페이지에 출력할 갯수를 데탑일 경우 10개로, 모바일일 경우 9로 설정한다.\r\n    this.item_per_page = 9;\r\n    if(!this.isMobile())\r\n    {\r\n      this.item_per_page = 10;\r\n    }\r\n\r\n    // 팝업 화면 노출 여부와 값\r\n    this.state = {\r\n      showPopup:false\r\n      , hasMore : false\r\n      , movie_data : {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 모바일 여부 체크 \r\n   */\r\n  isMobile()\r\n  {\r\n    var UserAgent = navigator.userAgent;\r\n  \r\n    if (UserAgent.match(/iPhone|iPod|Android|Windows CE|BlackBerry|Symbian|Windows Phone|webOS|Opera Mini|Opera Mobi|POLARIS|IEMobile|lgtelecom|nokia|SonyEricsson/i) != null \r\n      || UserAgent.match(/LG|SAMSUNG|Samsung/) != null)\r\n    {\r\n      return true;\r\n    }\r\n    else\r\n    {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 팝업을 띄우거나/닫는다.\r\n   */\r\n  togglePopup()\r\n  {\r\n    // 팝업 시 부모 스크롤 방지\r\n    if(!this.state.showPopup)\r\n    {\r\n      document.body.style.overflow = \"hidden\";\r\n    }\r\n    else\r\n    {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    // 팝업 노출 여부 상태값 변경\r\n    this.setState({\r\n      showPopup:!this.state.showPopup\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 영화 리스트를 화면에 출력한다.\r\n   * @param {*} arrMoiveData \r\n   * @param {*} bAddList : 추가 리스트 여부(true: 같은 장르 추가 리스트 요청, false : 다른 장르 새리스트 요청)\r\n   */\r\n  drawMovieList(arrMoiveData, bAddList)\r\n  {\r\n    const THIS = this;\r\n    let nFirst = 0;\r\n    let divMovieList = document.getElementById(\"div_movie_list\");\r\n    if(!bAddList)\r\n    {\r\n      while ( divMovieList.hasChildNodes() ) \r\n      { \r\n        divMovieList.removeChild( divMovieList.firstChild ); \r\n      }\r\n    }\r\n    \r\n    if(arrMoiveData != null)\r\n    {\r\n      for(nFirst = 0; nFirst < arrMoiveData.length; nFirst++)\r\n      {\r\n        let divMovie = document.createElement(\"div\");\r\n        let imgPoster = new Image();\r\n        let strMovieTitle = arrMoiveData[nFirst].movie_title;\r\n        // 스타일 적용\r\n        divMovie.className = \"movie_div\";\r\n        imgPoster.className = \"img_poster\"\r\n        imgPoster.src = arrMoiveData[nFirst].poster_url;\r\n        divMovie.addEventListener(\"click\", function(){THIS.getInfo(strMovieTitle, imgPoster.src);});\r\n        \r\n        divMovie.appendChild(imgPoster);\r\n        divMovieList.appendChild(divMovie);\r\n      }\r\n    }\r\n    \r\n    // 추가 활동 끝을 알리기 위한 초기화\r\n    THIS.hdlAddListTimer = null;\r\n  }\r\n  /**\r\n   * 영화 상세정보를 출력한다.\r\n   * @param {}} objMovieData \r\n   */\r\n  drawMovieInfo(objMovieData)\r\n  {\r\n    const THIS = this;\r\n    THIS.setState(\r\n      {\r\n        movie_data : objMovieData\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * 영화 상세정보를 가져온다.\r\n   * @param {}} strMovieID \r\n   */\r\n  getInfo(strMovieID, strPosterURL)\r\n  {\r\n    const THIS = this;\r\n    \r\n    THIS.togglePopup();\r\n    \r\n    trackPromise(\r\n    THIS.ldrMovieData.getMovieInfoWithPoster(strMovieID, strPosterURL).then(\r\n      function(objMovieData)\r\n      {\r\n        if(objMovieData != null)\r\n          {\r\n            THIS.drawMovieInfo(objMovieData);\r\n          }\r\n      }\r\n    ).catch(function(e)\r\n      {\r\n        console.log(\"Error Massage : \" + e);\r\n      }\r\n    ), 'detail-area');\r\n  }\r\n\r\n  /**\r\n   * 영화목록을 가져온다.\r\n   */\r\n  getList(bAddList)\r\n  {\r\n    const THIS = this;\r\n    let strGenre = THIS.genre;\r\n    \r\n    if(strGenre != null && strGenre !== \"\")\r\n    {  \r\n      this.ldrMovieData.search_condition.genre = strGenre;\r\n    }\r\n    this.ldrMovieData.search_condition.item_per_page = THIS.item_per_page;\r\n    this.ldrMovieData.search_condition.current_page = THIS.current_page;\r\n    this.ldrMovieData.getMovieList().then(function(arrMovieData)\r\n      {\r\n        THIS.drawMovieList(arrMovieData, bAddList);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 추가 영화 목록을 요청한다.\r\n   */\r\n  loadMoreMovieList()\r\n  {\r\n    this.current_page++;\r\n    this.getList(true);\r\n  }\r\n  \r\n  /**\r\n   * 스크롤 위치가 가장 하단인 경우 추가 영화 목록을 요청한다.\r\n   */\r\n  handleOnScroll()\r\n  {\r\n    const THIS = this;\r\n\r\n    var scrollTop = Math.round((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    var scrollHeight = (document.documentElement && document.documentElement.scrollHeight) || document.body.scrollHeight;\r\n    var clientHeight = document.documentElement.clientHeight || window.innerHeight;\r\n    var scrolledToBottom = false;\r\n\r\n    // 모바일일 경우 주소창 크기만큼(56) scrollHeight에서 빼준다.\r\n    if(this.isMobile())\r\n    {\r\n      scrollHeight = scrollHeight - 56\r\n    }\r\n\r\n    // 스크롤 최하단 여부를 판단한다.\r\n    scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\r\n    \r\n    // 맨위로 버튼 출력 여부\r\n    if(scrollTop > 500)\r\n    {\r\n      THIS.showClickTopButton();\r\n    }\r\n    else\r\n    {\r\n      THIS.hiddenClickTopButton();\r\n    }\r\n    \r\n    // 최하단이고 리스트 재요청 중이 아닌 경우 추가 리스트를 요청한다.\r\n    if(scrolledToBottom && THIS.hdlAddListTimer == null)\r\n    {\r\n      THIS.hdlAddListTimer = setTimeout(function()\r\n        { \r\n          THIS.setState(\r\n            {\r\n              hasMore : true\r\n            }\r\n          );\r\n        }\r\n        , 500\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 맨위로 버튼을 노출한다.\r\n   */\r\n  showClickTopButton()\r\n  {\r\n    // 맨위로 버튼을 숨긴다.\r\n    let divClickTop = document.getElementById(\"div_click_top\");\r\n    divClickTop.addEventListener(\"click\", function(){window.scrollTo(0, 0);})\r\n    divClickTop.style.display = \"\";\r\n  }\r\n\r\n  /**\r\n   * 맨위로 버튼을 숨긴다.\r\n   */\r\n  hiddenClickTopButton()\r\n  {\r\n    // 맨위로 버튼을 숨긴다.\r\n    let divClickTop = document.getElementById(\"div_click_top\");\r\n    divClickTop.style.display = \"none\";\r\n  }\r\n  /**\r\n   * component가 완전히 마운트 된 경우 호출 함수\r\n   * 넘겨받은 파라미터 값을 참고하여 결과를 출력한다.\r\n   *  - genre : 장르\r\n   */\r\n  componentDidMount() {\r\n    this.hiddenClickTopButton();\r\n    window.addEventListener('scroll', this.handleOnScroll.bind(this));\r\n    this.genre = this.props.match.params.genre;\r\n    this.getList(false);\r\n  }\r\n\r\n  /**\r\n   * 화면에 state 값이 바뀌면 호출되는 함수\r\n   * @param {} nextProps \r\n   */\r\n  componentDidUpdate(nextProps) \r\n  {\r\n    if(this.props.match.params.genre != null\r\n      && this.props.match.params.genre !== \"\"\r\n      && this.props.match.params.genre !== this.genre)\r\n    {\r\n      this.hiddenClickTopButton();\r\n\r\n      // 이전 리스트 요청을 취소한다.\r\n      if(this.hdlAddListTimer != null)\r\n      {\r\n        clearTimeout(this.hdlAddListTimer);\r\n        this.hdlAddListTimer = null;\r\n      }\r\n      // 화면을 최상단으로 이동한다.\r\n      window.scrollTo(0, 0);\r\n      this.current_page = 1;\r\n      this.genre = this.props.match.params.genre;\r\n      this.getList(false);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 출력될 화면 HTML 및 로직\r\n   */\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"div_app_main\">\r\n        {\r\n          this.state.showPopup ?\r\n            <MovieDetailPopup\r\n              movie_data={this.state.movie_data}\r\n              closePopup={this.togglePopup.bind(this)}/> \r\n            : null\r\n        }\r\n        <div className=\"movie_infinite_list\">\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={this.loadMoreMovieList.bind(this)}\r\n            hasMore={this.state.hasMore}\r\n            useWindow={false}\r\n          >\r\n            <div id=\"div_movie_list\">\r\n            </div>\r\n          </InfiniteScroll>\r\n        </div>\r\n        <div className=\"app_click_top\" id=\"div_click_top\">\r\n          맨위로\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route} from \"react-router-dom\";\r\nimport Menu1Link from \"./Menu1Link\";\r\nimport MainStillcutSlider from \"./MainStillcutSlider\"\r\nimport App from \"./App\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from 'react-loader-spinner';\r\nimport \"./Menu.css\";\r\n\r\nexport const LoadingIndicator = (props) => {\r\n    const { promiseInProgress } = usePromiseTracker({ area: props.area });\r\n    return (\r\n       promiseInProgress && (\r\n        <div style={{\r\n          width: \"100%\",\r\n          height: \"100\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n        >\r\n          <Loader type=\"ThreeDots\" color=\"rgba(255,255,255,0.9)\" height={40} width={40} />\r\n        </div>\r\n       )\r\n    );\r\n};\r\n\r\n\r\nclass Menu1 extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MainStillcutSlider/>\r\n        <BrowserRouter>\r\n          <Menu1Link />\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route exact path=\"/menu1\" component={App} />\r\n            <Route path=\"/menu1/boxoffice/:genre\" component={App} />\r\n            <Route path=\"/menu1/movie/:genre\" component={App} />\r\n            <LoadingIndicator area=\"genre-area\"/>\r\n        </BrowserRouter>\r\n        <div className=\"loading\">\r\n          <LoadingIndicator area=\"detail-area\"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu1;\r\n","import MoiveDataCrawler from \"./loader/MoiveDataCrawler\";\r\n\r\nfunction Crawling() {\r\n  //Todo : 네이버 리뷰를 크롤링해서 데이터 객체로 생성 후 넘긴다.\r\n  var movie_id;//닥터 두리틀 예제 MovieDataLoader에서 받아온다\r\n  var page = \"https://m.search.naver.com/search.naver?where=m&query=영화 \";\r\n  var cors = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n  const axios = require(\"axios\");\r\n  const cheerio = require(\"cheerio\");\r\n//Menu2 41\r\n\r\n  this.getMovieTitle = function(strMovieID)\r\n  {\r\n    movie_id = strMovieID;\r\n  }\r\n  \r\n  this.getReview = function(){\r\n    const getHtml = async () => {\r\n      try {\r\n        let objOptions = {\r\n          headers:{\r\n              'Access-Control-Allow-Origin' : '*'\r\n              , 'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With'\r\n          }\r\n      };\r\n        return await axios.get(cors+page+movie_id,objOptions); \r\n      } catch (error) {\r\n       console.error(error);\r\n      }\r\n    };\r\n    return getHtml().then(html => {\r\n\r\n      let objMovieData = {};\r\n      //배우\r\n      let crawler = new MoiveDataCrawler();\r\n      let strActors = crawler.getActors(html.data);\r\n      \r\n      Object.defineProperty(objMovieData, \"actors_text\"\r\n                            , {value : strActors\r\n                            , writable : false\r\n                            , configurable: false});\r\n\r\n      ///console.log(strActors)\r\n      //리뷰\r\n      let ulList = [];\r\n      const $ = cheerio.load(html.data);\r\n      const $MVList = $(\"div._svp_list\")\r\n                      .children(\"panel-list\")\r\n                      .children(\"div._option_panel\")\r\n                      .children(\"panel-list\")\r\n                      .children(\"div._panel\")\r\n                      .children(\"select-contents\")\r\n                      .children(\"div._select_contents_event_base\")\r\n                      .children(\"ul.lst_total\")\r\n                      .children(\"li.bx\");\r\n\r\n      for(let i =0 ; i < 2; i++)\r\n      {\r\n        //console.log(\"여기는 들어오나요\")\r\n        let elem = null;\r\n        let datTitle = null;\r\n        let datTotalGroup = null;\r\n        \r\n        // 제목, ID, 글\r\n        let strTitle = \"\";\r\n        let strID = \"\";\r\n        let strSummary = \"\";\r\n\r\n        // 생성 객체\r\n        let objReview = {};\r\n\r\n        // 가져온 객체에서 total_wrap 클래스를 갖고 있는 div를 찾는다.\r\n        if($MVList[i].children.length > 0)\r\n        {\r\n          $MVList[i].children.some(\r\n            function(objChild, nIndex)\r\n            {\r\n              let bFind = false;\r\n              if(objChild.type === \"tag\"\r\n                 && objChild.name === \"div\"\r\n                 && objChild.attribs.class ===\"total_wrap\")\r\n              {\r\n                elem = objChild;\r\n                bFind = true;\r\n              }\r\n              \r\n              return bFind;\r\n            }\r\n          );\r\n        }\r\n\r\n        // 하단 타이틀 부분 a Tag와 total_group 클래스를 갖고 있는 div를 찾는다.\r\n        if(elem != null)\r\n        {\r\n          elem.children.forEach(\r\n            function(objChildren, nIndex)\r\n            {\r\n              // 타이틀 부분 찾기\r\n              if(objChildren.type === \"tag\" \r\n                && objChildren.name === \"a\")\r\n              {\r\n                datTitle = objChildren;\r\n              }\r\n              // ID 및 글내용 부분 찾기\r\n              if(objChildren.type === \"tag\" \r\n                && objChildren.name === \"div\"\r\n                && objChildren.attribs.class === \"total_group\")\r\n              {\r\n                datTotalGroup = objChildren;\r\n              }\r\n            }\r\n          );\r\n          \r\n          // 결과값이 있고 자식 노드를 갖고 있는 경우 자식 노드를 조합하여 타이틀을 얻는다.\r\n          if(datTitle != null && datTitle.children.length > 0)\r\n          {\r\n            datTitle.children.forEach(\r\n              function(objChild, nIndex)\r\n              {\r\n                if(objChild.type === \"tag\"\r\n                  && objChild.name === \"mark\")\r\n                {\r\n                  strTitle += objChild.children[0].data;\r\n                }\r\n                else if(objChild.type === \"text\")\r\n                {\r\n                  strTitle += objChild.data;\r\n                }\r\n              }\r\n            );\r\n          }\r\n\r\n          // Total_group을 찾은 경우 ID와 리뷰글을 가져온다.\r\n          if(datTotalGroup != null && datTotalGroup.children.length > 0)\r\n          {\r\n            datTotalGroup.children.forEach(\r\n              function(objChild, nIndex)\r\n              {\r\n                if(objChild.type === \"tag\"\r\n                  && objChild.name === \"div\")\r\n                {\r\n                  if(objChild.attribs.class === \"total_sub\")\r\n                  {\r\n                    strID = objChild.childNodes[2].childNodes[1].childNodes[2].childNodes[1].childNodes[0].data;\r\n                  }\r\n                  else if(objChild.attribs.class === \"total_dsc_wrap\")\r\n                  {\r\n                    let datSummary = objChild.childNodes[1].childNodes[1];\r\n                    // 결과값이 있고 자식 노드를 갖고 있는 경우 자식 노드를 조합하여 리뷰글을 얻는다.\r\n                    if(datSummary != null && datSummary.children.length > 0)\r\n                    {\r\n                      datSummary.children.forEach(\r\n                        function(objChild, nIndex)\r\n                        {\r\n                          if(objChild.type === \"tag\"\r\n                            && objChild.name === \"mark\")\r\n                          {\r\n                            strSummary += objChild.children[0].data;\r\n                          }\r\n                          else if(objChild.type === \"text\")\r\n                          {\r\n                            strSummary += objChild.data;\r\n                          }\r\n                        }\r\n                      );\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            );\r\n            \r\n          }\r\n        }\r\n        //console.log(elem.childNodes[5].childNodes[4].childNodes[2].childNodes[1].childNodes[2].childNodes[1].childNodes[0].data)\r\n        console.log(elem);\r\n        objReview.title =  strTitle;\r\n        objReview.id = strID;\r\n        objReview.summary = strSummary;\r\n        ulList.push(objReview);\r\n      }\r\n\r\n      const data = ulList.filter(n => n.title);\r\n      //return data;\r\n      Object.defineProperty(objMovieData, \"review_text\"\r\n                            , {value : data\r\n                            , writable : false\r\n                            , configurable: false});\r\n\r\n      return objMovieData;\r\n\r\n    });\r\n  }\r\n\r\n}\r\n  export default Crawling;","import React, { Component } from \"react\";\r\nimport MoiveDataCrawler from './loader/MoiveDataCrawler';\r\nimport Crawling from './Crawling';\r\nimport \"./Menu.css\"\r\n\r\nclass Menu2 extends Component {\r\n  static arrBoxofficeData = null;\r\n\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.ldrMovieData = new MoiveDataCrawler();\r\n  }\r\n\r\n  /**\r\n   * 영화 목록을 리뷰 화면에 맞도록 출력한다.\r\n   * @param {}} arrBoxOfficeData \r\n   */\r\n  drawBoxOfficeList(arrBoxOfficeData)\r\n  {\r\n    let nFirst = 0;\r\n    let divReviewList = document.getElementById(\"review_list\");\r\n    let hd = new Crawling();\r\n    \r\n    if(arrBoxOfficeData != null)\r\n    {\r\n      for(nFirst = 0; nFirst < arrBoxOfficeData.length; nFirst++)\r\n      {\r\n        let divMovie = document.createElement(\"div\");\r\n        let objBOData = arrBoxOfficeData[nFirst];\r\n\r\n        // image\r\n        let divImage = document.createElement(\"div\");\r\n        let imgPoster = new Image();\r\n        imgPoster.className = \"movie_image\";\r\n        imgPoster.src = objBOData.poster_url;\r\n\r\n        let divInfo = document.createElement(\"div\");\r\n        // movie title\r\n        let divTitle = document.createElement(\"div\");\r\n        divTitle.className = \"title_div\";\r\n        divTitle.innerHTML = '<' + objBOData.movie_title + '>';\r\n\r\n        /////////////////////////////////////////////////////////////////////////////////////////////\r\n        //\r\n        //                   ToDo : 리뷰 및 출연배우 가져온 후 화면에 값 넣어주기\r\n        //                    * 429에러(많은 요청에 의한 밴)가 날 수 있으니 한 번에 가져옵시다~\r\n        //\r\n        // movie actor\r\n        hd.getMovieTitle(objBOData.movie_title);//crawling.js로\r\n        console.log(\"objBOData.movie_title : \" + objBOData.movie_title);\r\n\r\n        // review\r\n        hd.getReview().then(\r\n          function(response)\r\n          {\r\n            if(response != null)\r\n            {\r\n              //배우\r\n              let divActor = document.createElement(\"div\");\r\n              divActor.className = \"actor_div\";\r\n              divActor.innerHTML=response.actors_text;\r\n              divInfo.appendChild(divActor);\r\n              console.log(response.actors_text);\r\n              \r\n              //리뷰\r\n              response.review_text.forEach(function(review_text, i){\r\n              //for(let i =0 ; i < 2; i++){\r\n                let divReview = document.createElement(\"div\");\r\n                divReview.className = \"review_div\";\r\n\r\n                let reviewTitle = document.createElement(\"div\");\r\n                reviewTitle.className = \"review_title\";\r\n                //let strRV = objReview.title;\r\n                reviewTitle.innerHTML=response.review_text[i].title;\r\n                divReview.appendChild(reviewTitle);\r\nconsole.log(response.review_text[i].title)\r\n                let reviewId = document.createElement(\"div\");\r\n                reviewId.className = \"review_id\";\r\n                //let strRV2 = objReview.id;\r\n                reviewId.innerHTML=response.review_text[i].id;\r\n                divReview.appendChild(reviewId);\r\nconsole.log(response.review_text[i].id)\r\n                let reviewContext = document.createElement(\"div\");\r\n                reviewContext.className = \"review_context\";\r\n                //let strRV3 = objReview.summary;\r\n                reviewContext.innerHTML=response.review_text[i].summary;\r\n                divReview.appendChild(reviewContext);\r\nconsole.log(response.review_text[i].summary)\r\n                divInfo.appendChild(divReview);\r\n                //console.log(\"2\");\r\n              });\r\n              \r\n            }\r\n         }\r\n        );\r\n\r\n        divImage.appendChild(imgPoster);\r\n        divMovie.appendChild(divImage);\r\n        divInfo.appendChild(divTitle);\r\n        divMovie.appendChild(divInfo);\r\n        \r\n\r\n        divMovie.id = \"rdiv\";\r\n        divImage.id = \"Ldiv\";\r\n        divInfo.id = \"Rdiv\";\r\n        \r\n        divReviewList.appendChild(divMovie);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 영화 목록을 불러온다.\r\n   */\r\n  getBoxofficeList()\r\n  {\r\n    let objThis = this;\r\n\r\n    this.ldrMovieData.search_condition.item_per_page = 5;\r\n\r\n    this.ldrMovieData.getBoxOfficeListWithPoster().then(\r\n        function(arrBOData)\r\n        {\r\n          if(arrBOData != null)\r\n          {\r\n            objThis.drawBoxOfficeList(arrBOData);\r\n          }\r\n        }\r\n    ).catch(function(e)\r\n        {\r\n          console.log(\"Error Massage : \" + e);\r\n        }\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  Component의 render 메소드가 호출된 후 호출 함수\r\n   */\r\n  componentDidMount() {\r\n    this.getBoxofficeList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"review_list\">\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu2;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./MenuLink.css\";\r\n\r\nconst MenuLink = () => {\r\n  return (\r\n    <div id=\"mdiv\">\r\n      <ul>\r\n        <li>\r\n          <NavLink to=\"/menu1\" className=\"menu_link_li_style\" activeClassName=\"active\">HOME</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/menu2\" className=\"menu_link_li_style\" activeClassName=\"active\">REVIEW</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuLink;\r\n","import React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport logo from \"./images/logo-square.png\";\r\nimport Menu1 from \"./Menu1\";\r\nimport Menu2 from \"./Menu2\";\r\nimport MenuLink from \"./MenuLink\";\r\nimport \"./Menu.css\";\r\n\r\nconst title = \"PURVIE\";\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>{title}</title>\r\n          <link\r\n            rel=\"icon\"\r\n            type=\"image/png\"\r\n            href={logo}\r\n            sizes=\"16x16\"\r\n            alt=\"favicon\"\r\n          />\r\n        </Helmet>\r\n        <BrowserRouter>\r\n          <div className=\"menu_header\">\r\n            <div className=\"menu_head\">\r\n              <div className=\"menu_icon\">\r\n                <img\r\n                  src={logo}\r\n                  className=\"img_title_icon\"\r\n                  alt=\"logo_icon\"\r\n                ></img>\r\n              </div>\r\n              <div className=\"menu_title\">PURVIE</div>\r\n            </div>\r\n            <div className=\"menu1\">\r\n              <MenuLink />\r\n            </div>\r\n            <div className=\"search_group\">\r\n              <div className=\"search\">\r\n                <input type=\"text\" className=\"search_input\" placeholder=\"Search\" />\r\n                <div className=\"search_line\"></div>\r\n                <div className=\"search_close\"></div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Menu1} />\r\n                <Route path=\"/menu1\" component={Menu1} />\r\n                <Route path=\"/menu2\" component={Menu2} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport { MemoryRouter } from \"react-router-dom\";\r\nimport Menu from \"./Menu\";\r\n\r\nconst Root = () => (\r\n  <MemoryRouter basename=\"/purvie\">\r\n    <Menu />\r\n  </MemoryRouter>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Root from \"./Root\";\r\nimport { register } from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\nregister();\r\n"],"sourceRoot":""}